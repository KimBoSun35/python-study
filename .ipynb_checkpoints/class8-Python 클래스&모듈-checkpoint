{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "86a02611-d193-42b1-97fe-8298e12175c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DAy3\n",
    "class Count:\n",
    "    def __init__(self):#기본적으로 정의되어 있는 함수임. 클래스 안에서 변수를 사용하기 위해서 객체안에서 사용할 변수를 지정하는 것임.\n",
    "        self.num=0\n",
    "        self.name=\"JS\"\n",
    "    def increment(self):\n",
    "        self.num+=1\n",
    "        return self.num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9c30981c-f94a-4a06-afcc-ba8a61b7dd1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c=Count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8af36e91-e154-443f-9c38-479e4faca05b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a114c4e4-47c5-4c12-857b-80b3d8b95c13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'JS'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "184e6d2c-7b5b-4f83-a69b-b67b428b73e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.increment()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d183a94d-0713-4caf-b746-2175f766202f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a19d859a-e010-41f5-bc78-24850d2ef43d",
   "metadata": {},
   "outputs": [],
   "source": [
    "d=Count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d1ac21f7-1b3e-48a7-b0d1-f580339e4672",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "fbdf5571-7ab1-49bd-b6fa-75d347518596",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['.git', '.ipynb_checkpoints', '0607파이썬실습', 'ARGV', 'class8-Python 클래스&모듈', 'kbs250607.ipynb', 'kbs250614.ipynb', 'README.md', 'test.py', 'Untitled.ipynb']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "file_list=os.listdir()\n",
    "print(file_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "78e8d799-8bd9-4b59-a465-8e470694ead8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.git',\n",
       " '.ipynb_checkpoints',\n",
       " '0607파이썬실습',\n",
       " 'ARGV',\n",
       " 'class8-Python 클래스&모듈',\n",
       " 'kbs250607.ipynb',\n",
       " 'kbs250614.ipynb',\n",
       " 'README.md',\n",
       " 'test.py',\n",
       " 'Untitled.ipynb']"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c1b69c4e-c8da-4b8b-a799-39ff5da1ff0b",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: '일'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[41], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m일\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: '일'"
     ]
    }
   ],
   "source": [
    "int(\"일\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0d456e59-9847-4a28-bf06-87409b95b4e2",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'aa' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[42], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(aa)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'aa' is not defined"
     ]
    }
   ],
   "source": [
    "print(aa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cad61585-e496-470f-b17d-f4b52181e35d",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can only concatenate str (not \"int\") to str",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[43], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
     ]
    }
   ],
   "source": [
    "\"a\"+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6d33307f-6c12-4c42-bf24-dd9893ab3f1c",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'none_listed_file.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[44], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnone_listed_file.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001b[0m, in \u001b[0;36m_modified_open\u001b[1;34m(file, *args, **kwargs)\u001b[0m\n\u001b[0;32m    317\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[0;32m    318\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    319\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    320\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    321\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    322\u001b[0m     )\n\u001b[1;32m--> 324\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m io_open(file, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'none_listed_file.txt'"
     ]
    }
   ],
   "source": [
    "open(\"none_listed_file.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1fdd9197-a8ad-4f87-9ebe-8f4c78dc8ced",
   "metadata": {},
   "outputs": [
    {
     "ename": "ZeroDivisionError",
     "evalue": "division by zero",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[45], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;241m4\u001b[39m \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m0\u001b[39m\n",
      "\u001b[1;31mZeroDivisionError\u001b[0m: division by zero"
     ]
    }
   ],
   "source": [
    "4 / 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9d12f291-31f4-446d-93f5-f4cab64491b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "a = [1,2,3]\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "bfed792c-ae7f-4d97-bfbc-5c6989345908",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "list indices must be integers or slices, not list",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[50], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m a \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m3\u001b[39m]\n\u001b[1;32m----> 2\u001b[0m a[l]\n",
      "\u001b[1;31mTypeError\u001b[0m: list indices must be integers or slices, not list"
     ]
    }
   ],
   "source": [
    "a = [1,2,3]\n",
    "a[l]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "dcb792e1-3371-4171-8c17-d729947b21bb",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[51], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m a[\u001b[38;5;241m3\u001b[39m]\n",
      "\u001b[1;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "a[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8462aab4-be3e-407e-83cd-a47ff74718fb",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'b'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[53], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m d\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m1\u001b[39m}\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(d[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n",
      "\u001b[1;31mKeyError\u001b[0m: 'b'"
     ]
    }
   ],
   "source": [
    "d={\"a\":1}\n",
    "print(d[\"b\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "217ccf02-8097-4b49-bd86-9120f218acd4",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'JeongSooNa'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[54], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mJeongSooNa\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'JeongSooNa'"
     ]
    }
   ],
   "source": [
    "import JeongSooNa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "bd3f62a5-602a-458a-9244-324603e4820a",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'int' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[55], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m num \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m10\u001b[39m\n\u001b[1;32m----> 2\u001b[0m num\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;241m5\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'int' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "num = 10\n",
    "num.append(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "7c0b087e-8f2f-4119-bec5-a5f7d18598c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[1,2,3,4]\n",
    "a.append(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "7f0c2d6c-f5a4-4443-90aa-9eedcc06be5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "7d37ace1-cb0e-4015-a755-1996d1a796dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 6, 6]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.append(6)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "045260c4-b895-46d2-b99c-8ce4a4f03ca6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "d651508b-aa66-4e6a-93b1-4db58e747355",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after 'for' statement on line 1 (2129355989.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[65], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(i)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after 'for' statement on line 1\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,5):\n",
    "print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5cb8b90a-5cc3-4ab3-8530-149cabc06143",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,7):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "478b9f73-ba66-44e8-bf3f-203f7896bc4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "숫자를 입력하시오. 3.3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "오류가 발생했습니다.\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    num = int(input(\"숫자를 입력하시오.\"))\n",
    "    print(10 / num)\n",
    "except:\n",
    "    print(\"오류가 발생했습니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "8d2e1b78-3a2b-4f40-8b59-393bd3536440",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "division by zero\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    a = 0\n",
    "    print(10 / 0)\n",
    "except ZeroDivisionError as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "1e7fdd7b-b39f-4030-82c2-287503eb286a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "476bddf2-ee5a-4a9d-bff9-dd4ce3d10413",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['main.py', 'test.py', 'test.txt', '__pycache__']"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"250621\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "c4cf3d43-6f44-4367-848d-4a718164d36b",
   "metadata": {},
   "outputs": [],
   "source": [
    "f=open(\"250621/test.txt\", \"r\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "4fde2721-533f-4285-8206-48a6351b1802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello Would!'"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "bb8a9ce0-29d0-486a-b0c4-ed94275b034f",
   "metadata": {},
   "outputs": [],
   "source": [
    "text=f.read()#위에 불러왔기 때문에 다시 실행이 안됨. 이때는 f=open실행 후 text=f.read()로 실행한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "f07977e8-d071-4a17-a547-a9a33f2ed961",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MY name isBoSon KimBoSon Kim\n"
     ]
    }
   ],
   "source": [
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "a62b0f18-59aa-4be0-940b-48f62c9eea78",
   "metadata": {},
   "outputs": [],
   "source": [
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "b46918a6-318c-4e51-b239-a06cdc78d36b",
   "metadata": {},
   "outputs": [],
   "source": [
    "f=open(\"250621/test.txt\",\"w\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "e1cb3856-f772-4ca6-adad-91b6a2a6b328",
   "metadata": {},
   "outputs": [],
   "source": [
    "f.write(\"MY name is\")\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "3a3fddb1-7eff-454e-b345-8d50e95e1544",
   "metadata": {},
   "outputs": [],
   "source": [
    "f=open(\"250621/test.txt\",\"a\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "75cbfd2a-2d59-4502-9250-5ef71d1ac17d",
   "metadata": {},
   "outputs": [],
   "source": [
    "f.write(\" BoSon Kim\")\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "e71720e8-c31a-4c57-9deb-90a912e2b2a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id  menu    price\n",
      "1   pizza   10$\n",
      "2   chicken 15$\n",
      "3   hamburger   5$\n"
     ]
    }
   ],
   "source": [
    "#order.txt다루기\n",
    "f=open(\"250621/order.txt\",\"r\")\n",
    "data=f.read()\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "5bc46614-c18c-4122-a175-5d62d96c299b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id  menu    price\n",
      "\n",
      "1   pizza   10$\n",
      "\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\",\"r\")\n",
    "line=f.readline()\n",
    "print(line)\n",
    "line=f.readline()\n",
    "print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "226dff17-8a9b-44cf-8513-e963baa8601d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['id  menu    price\\n', '1   pizza   10$\\n', '2   chicken 15$\\n', '3   hamburger   5$']\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\",\"r\")\n",
    "line=f.readlines()\n",
    "print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "4dfee3b1-8bd9-4426-aa3d-1d8d683e2c71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id  menu    price\n",
      "\n",
      "['1   pizza   10$\\n', '2   chicken 15$\\n', '3   hamburger   5$']\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\",\"r\")\n",
    "line=f.readlines()\n",
    "header=line[0]\n",
    "contents=line[1:]\n",
    "print(header)\n",
    "print(contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "a8260ce0-2840-4617-8dc3-8cb9a6f982d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['id  menu    price\\n',\n",
       " '1   pizza   10$\\n',\n",
       " '2   chicken 15$\\n',\n",
       " '3   hamburger   5$']"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with open(\"250621/order.txt\",\"r\") as f:\n",
    "    f.readlines()\n",
    "\n",
    "line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "6483ff95-8746-41e2-9707-7596caabdaa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello World   '"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#문자열 관련 함수\n",
    "a=\"   Hello World   \"\n",
    "\n",
    "len(a)\n",
    "\n",
    "a.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "0328bbcc-6e42-43fd-b6bd-4874f36ef3e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'   Hello World'"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.rstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "599e623c-2943-4ca2-9b73-ab2bc7445b26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello World   '"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.lstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "44320399-a319-45e7-9b85-460ed206c6f8",
   "metadata": {},
   "outputs": [
    {
     "ename": "UnicodeDecodeError",
     "evalue": "'cp949' codec can't decode byte 0xec in position 0: illegal multibyte sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[184], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m250621/grade.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[1;32m----> 2\u001b[0m     lines\u001b[38;5;241m=\u001b[39mf\u001b[38;5;241m.\u001b[39mreadlines()\n\u001b[0;32m      4\u001b[0m lines\n",
      "\u001b[1;31mUnicodeDecodeError\u001b[0m: 'cp949' codec can't decode byte 0xec in position 0: illegal multibyte sequence"
     ]
    }
   ],
   "source": [
    "with open(\"250621/grade.txt\",\"r\") as f:\n",
    "    lines=f.readlines()\n",
    "\n",
    "lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "7f857eed-2707-4e85-b140-ab2375255166",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'lines' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[185], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m total \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m line \u001b[38;5;129;01min\u001b[39;00m lines:\n\u001b[0;32m      3\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m line\u001b[38;5;241m.\u001b[39mstartswith(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m이름\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m      4\u001b[0m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'lines' is not defined"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for line in lines:\n",
    "  if line.startswith(\"이름\"):\n",
    "    continue\n",
    "  score = line.split()[2]\n",
    "  total += score\n",
    "\n",
    "average = total / (len(lines) - 1)\n",
    "print(\"평균 점수는\",average,\"점 입니다.\")   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f6a8373-5c92-491b-abf7-e6e9d57e2cdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "string.len()\n",
    "string.strip()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "db93e1c7-23c6-4072-a2ee-a79f48b1f125",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello Would    '"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#문자열 함수\n",
    "a=\"    Hello Would    \"\n",
    "\n",
    "len(a)\n",
    "a.lstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "1268294a-5b9e-4d2b-8096-a986d83e91dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Hello', 'Would']"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=\"Hello Would\"\n",
    "a.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "553e994f-ffa0-46eb-8e19-09a886a5fc4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Hell', '   W', 'uld']"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=\"Hello   Would\"\n",
    "a.split(\"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "269ab957-992d-49b5-85f3-947e4ffecc68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hi   Would'"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.replace(\"Hello\", \"Hi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "9812c872-5d06-4226-8b63-f7c3866f91c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'HELLO   WOULD'"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.upper()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "13a69b16-549f-4aa8-9943-2e26e6e06f29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'hello   would'"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "3eec7b7e-ab9e-4177-8d93-486bda9a8963",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello   Would'"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "25057178-b3eb-44d8-ae38-b2f55dbff79c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.startswith(\"Hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "ecb132dd-cea2-4985-8896-c6655bed061f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.startswith(\"Hi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "d8376c35-908b-476c-a61a-6af27ee3a12a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.endswith(\"d\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "ff102454-7112-48bc-87df-8653b457767e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.endswith(\"e\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "a26a7ef2-ce58-4da9-a46a-1e746f69840a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.find(\"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "404354bc-245d-4348-a3c9-85495426b801",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.find(\"z\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "dbc7af6e-37e6-4fd8-a216-c9bc9732ecd1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id  menu    price\n",
      "1   pizza   10$\n",
      "2   chicken 15$\n",
      "3   hamburger   5$\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\", \"r\")\n",
    "date=f. read()\n",
    "print(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "790cc50d-8da5-49c8-afd0-cb2e6b7c8e86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['id  menu    price\\n', '1   pizza   10$\\n', '2   chicken 15$\\n', '3   hamburger   5$']\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\", \"r\")\n",
    "date=f. readlines()\n",
    "print(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "31baced7-7d0a-4f1d-ab54-b112a09e516b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1   pizza   10$\n",
      "\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\", \"r\")\n",
    "date=f. readlines()\n",
    "print(date[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "d885e470-5a66-42c1-82f3-ac585f7f8807",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', 'pizza', '10$']\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\", \"r\")\n",
    "date=f. readlines()\n",
    "print(date[1].split())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "749e5557-e685-4c9b-9c2c-8ff113be0645",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pizza\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/order.txt\", \"r\")\n",
    "date=f. readlines()\n",
    "print(date[1].split()[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "fa337021-636b-4b8a-86f2-aced00313844",
   "metadata": {},
   "outputs": [
    {
     "ename": "UnicodeDecodeError",
     "evalue": "'cp949' codec can't decode byte 0xec in position 0: illegal multibyte sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[226], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m f\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m250621/grade.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m----> 2\u001b[0m date\u001b[38;5;241m=\u001b[39mf\u001b[38;5;241m.\u001b[39mread()\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(grade)\n",
      "\u001b[1;31mUnicodeDecodeError\u001b[0m: 'cp949' codec can't decode byte 0xec in position 0: illegal multibyte sequence"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/grade.txt\",\"r\")\n",
    "date=f.read()\n",
    "print(grade)\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "4491b2ff-faa1-448e-9c8c-d1e79b84f385",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이름  점수\n",
      "짱구  65\n",
      "철수  95\n",
      "유리  80\n",
      "맹구  85\n",
      "훈이  70\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/grade.txt\",\"r\", encoding=\"utf-8\")#영문을 한글로 사용할수 있도록 encoding=\"utf-8\"한다\n",
    "date=f.read()\n",
    "print(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "eccd0af5-c396-4ab0-836a-f9ff44dc227f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['이름  점수\\n', '짱구  65\\n', '철수  95\\n', '유리  80\\n', '맹구  85\\n', '훈이  70']\n"
     ]
    }
   ],
   "source": [
    "f=open(\"250621/grade.txt\",\"r\", encoding=\"utf-8\")\n",
    "date=f.readlines()\n",
    "print(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "6c63f886-eca8-451d-97bd-2de41de82485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "점수\n",
      "65\n",
      "95\n",
      "80\n",
      "85\n",
      "70\n"
     ]
    }
   ],
   "source": [
    "#data: 한 줄 한줄 있는 리스트\n",
    "for line in date:\n",
    "    score=line.split()[1]\n",
    "    print(score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "930847d2-2e1e-400e-bbd0-aa3f5977d6c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이름\n",
      "짱구\n",
      "철수\n",
      "유리\n",
      "맹구\n",
      "훈이\n"
     ]
    }
   ],
   "source": [
    "for line in date:\n",
    "    score=line.split()[0]\n",
    "    print(score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "946c60b3-4cf2-4f72-ba12-5af8f4d8a172",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65\n",
      "95\n",
      "80\n",
      "85\n",
      "70\n"
     ]
    }
   ],
   "source": [
    "for line in date:\n",
    "    score=line.split()[1]\n",
    "    if score==\"점수\":\n",
    "        continue\n",
    "    print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "b8d89959-0dcd-42d4-b75f-d0ea03ab3e5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65\n",
      "95\n",
      "80\n",
      "85\n",
      "70\n",
      "395\n",
      "79.0\n"
     ]
    }
   ],
   "source": [
    "total=0\n",
    "for line in date:\n",
    "    score=line.split()[1]\n",
    "    if score==\"점수\":\n",
    "        continue\n",
    "    print(score)\n",
    "    total+=int(score)\n",
    "    \n",
    "print(total)\n",
    "print(total/5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "14917db4-d716-4774-b272-903a62a486f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "평균 점수는 79.0 점 입니다.\n"
     ]
    }
   ],
   "source": [
    "average = total / (len(date) - 1)\n",
    "print(\"평균 점수는\",average,\"점 입니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "361806ec-67c5-4671-8999-c2b41b300fac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "4fe5f84c-f2bd-47ed-95fc-8c7b1d38b885",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1750484704.3070843"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1970.01.01 00:00기준으로 몇 초가 지났는지 보여줌\n",
    "\n",
    "time.time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "6fa1636b-1d91-4a0d-853b-66b433c88c16",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "78494a69-a472-4dde-95a1-c930201dc381",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2025, 6, 21, 14, 47, 11, 255729)"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.datetime.now()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "1c608762-6b8c-4268-9068-a575b672535e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'nt'"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "8f5346f9-6695-4758-b15b-45c5e0962bfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\admin\\\\Desktop\\\\kbs\\\\python-study'"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "fd9df7ad-530b-44b9-8baa-1f3d031efebb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['grade.txt', 'main.py', 'order.txt', 'test.py', 'test.txt', '__pycache__']"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"250621\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "7c6bc6e6-bf55-446e-8772-00a75d070981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.git',\n",
       " '.ipynb_checkpoints',\n",
       " '0607파이썬실습',\n",
       " '250621',\n",
       " 'ARGV',\n",
       " 'class8-Python 클래스&모듈',\n",
       " 'kbs250607.ipynb',\n",
       " 'kbs250614.ipynb',\n",
       " 'README.md',\n",
       " 'test.py',\n",
       " 'Untitled.ipynb']"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "d10da44d-2d66-4883-aaf9-b5276a3bdb47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.ipynb_checkpoints', 'kbs250614.ipynb', 'python-study']"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"../\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "a966dfca-a050-4fde-9471-4814cd77c542",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.git',\n",
       " '.ipynb_checkpoints',\n",
       " '0607파이썬실습',\n",
       " '250621',\n",
       " 'ARGV',\n",
       " 'class8-Python 클래스&모듈',\n",
       " 'kbs250607.ipynb',\n",
       " 'kbs250614.ipynb',\n",
       " 'README.md',\n",
       " 'test.py',\n",
       " 'Untitled.ipynb']"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "659df013-139f-4a06-827c-56711af03dda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['grade.txt', 'main.py', 'order.txt', 'test.py', 'test.txt', '__pycache__']"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"250621/\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "fd22413a-a312-4d0e-a438-72d33ac54acd",
   "metadata": {},
   "outputs": [],
   "source": [
    "os.remove(\"250621/test.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "2840eaec-ba80-4c44-aa91-42afaa735f78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['grade.txt', 'main.py', 'order.txt', 'test.py', '__pycache__']"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"250621\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "a289aa20-9bcb-4b53-b40b-38d2ce3542c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.exists(\"250622\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "011b39d3-4eb0-4dd3-aacd-542e88042bb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 309,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.system(\"echo 'Hello'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "79c06b19-f108-4095-8ce7-fc24263dc619",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'win32'"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sys\n",
    "sys.platform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "7d2eac4a-c3c1-434c-9ffd-a19b98e8699b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\admin\\\\AppData\\\\Roaming\\\\jupyter\\\\runtime\\\\kernel-bac393db-fbb5-4dd9-b29e-615f49dc64f8.json'"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sys.argv[0] # test.py\n",
    "sys.argv[1] # \"JeongSooNa\"\n",
    "sys.argv[2] # 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "ea92b614-41c6-46fe-b318-ee43a9815c2c",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'os' has no attribute 'globcwd'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[317], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mglob\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m a\u001b[38;5;241m=\u001b[39mos\u001b[38;5;241m.\u001b[39mglobcwd()\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(a)\n\u001b[0;32m      4\u001b[0m glob\u001b[38;5;241m.\u001b[39mglob(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m250621\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'os' has no attribute 'globcwd'"
     ]
    }
   ],
   "source": [
    "import glob\n",
    "a=os.globcwd()\n",
    "print(a)\n",
    "glob.glob(\"250621\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "ceb0d8d6-bd78-4787-ad18-395e53eefb55",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "e0689c12-f145-487d-809c-c46b55fe5e91",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1차원 배열\n",
    "a1 = np.array([1,2,3])\n",
    "\n",
    "# 2차원 배열\n",
    "a2 = np.array([[1,2,3],[4,5,6]])\n",
    "\n",
    "# 3차원 배열\n",
    "a3 = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "ec5cf765-adc0-45b8-ad4d-13ce15d15ef8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3]\n",
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "[[[1 2]\n",
      "  [3 4]]\n",
      "\n",
      " [[5 6]\n",
      "  [7 8]]]\n"
     ]
    }
   ],
   "source": [
    "print(a1)\n",
    "print(a2)\n",
    "print(a3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "a5b3a0f7-7c4e-49a5-bde2-e1211106ecd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3,)"
      ]
     },
     "execution_count": 324,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a1.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "49e71105-b18f-4ac6-be68-13ef065e4ce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3)"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "0c4cc9bf-9305-48a8-8528-0f90f1371d49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 2, 2)"
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "id": "65eb2439-146c-42bb-b00d-1959228e4aa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1,2,3])\n",
    "b = np.array([4,5,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "50768bb3-156d-4660-8dd5-646d20aaff55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 7, 9])"
      ]
     },
     "execution_count": 328,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "id": "7e6fcad8-244e-40d1-8f6d-9250db7bdbb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4, 10, 18])"
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "462f029c-3f85-4cf9-806d-0d02235a3648",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 4])"
      ]
     },
     "execution_count": 330,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "id": "19238e03-2eb8-4878-bcfc-887d11d0afb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([[1,2],[3,4]])\n",
    "b = np.array([[1,2],[3,4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "id": "121a4a72-f506-4f0a-8b45-eec1da9acb75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 4],\n",
       "       [6, 8]])"
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "id": "46c9d9b5-13a4-408e-892d-5cf4de5208bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  4],\n",
       "       [ 9, 16]])"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "id": "723840b0-6c6a-4719-bbbb-d6bf09a958ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 354,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([1,2,3,4,5])\n",
    "np.sum(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "0d795ab7-6d77-4175-bfa3-58ac5f24b106",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 355,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "752e9fb0-2439-4ffe-9b6d-d2fbfc0a4731",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 356,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "id": "508f24db-b877-413c-93e3-b26b8c794c4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 357,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.median(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "c0ecaea2-39dd-482d-af77-d8b1a85c7de0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 358,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "f97e34ac-82c0-4b87-bb4c-bd5121be8004",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 359,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([[1,2,3],[4,5,6]])\n",
    "np.sum(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "id": "19603c45-019a-4ce4-b0f8-42b14e319c97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 360,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(a) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "id": "d908ce41-fbd4-4e48-907f-bdf2269d667c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 361,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "be8f6367-608f-4f79-99f8-470517bb77f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.5"
      ]
     },
     "execution_count": 362,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.median(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "id": "291cc422-ac42-4dd2-b24d-463b2d8e728d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.5"
      ]
     },
     "execution_count": 363,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "id": "f4d4b875-aa0b-41f2-b512-910cacdcb1d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2., 5.])"
      ]
     },
     "execution_count": 365,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(a, axis=1) # 행 별 평균\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "id": "450a094e-78ca-4add-9997-1cb8ed3de21d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.5, 3.5, 4.5])"
      ]
     },
     "execution_count": 367,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(a, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "id": "4c4c9ed7-b704-4e6d-b360-d3df02a55d77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 379,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([1, 2, 3, 4, 5])\n",
    "a[0] # list indexing과 동일"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "id": "0e9a71c7-b411-49f0-80fc-e1b2ec0c0ad7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 380,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "id": "3cacef48-03fa-4801-918d-227169f9270d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 4])"
      ]
     },
     "execution_count": 381,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[1:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "id": "275451c7-50ca-4179-991b-fcaa40459de4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 383,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([[1,2,3],[4,5,6]])\n",
    "a[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "id": "a0a3aa0b-a96a-4e34-9402-f08f8e9574cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 384,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[1][2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "id": "1c0a2c67-c032-4c20-9e2c-28b247647f24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4, 5, 6]])"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[1:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "id": "3fbaca5b-d188-4f2b-bdae-0e8754b7f564",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 386,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "id": "908d266d-3c52-49ed-b2d4-b6bf69710b12",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([[1, 2], [3, 4], [5, 6]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "id": "98afc0f4-ad7d-45f6-8876-2b312f8b7ad4",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "expression cannot contain assignment, perhaps you meant \"==\"? (1792456515.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[414], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    np.concatenate(a.axis=1)\u001b[0m\n\u001b[1;37m                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m expression cannot contain assignment, perhaps you meant \"==\"?\n"
     ]
    }
   ],
   "source": [
    "np.concatenate(a.axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "id": "e7c4a099-c15c-4c62-bdee-0650290e7065",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 388,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.reshape((2, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "id": "0267da4c-84b1-4fd0-8e65-f1aaf0acd129",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 3, 5],\n",
       "       [2, 4, 6]])"
      ]
     },
     "execution_count": 389,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "id": "3fb3f5fa-4dc6-4c05-bb4d-b40aaff616cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1, 2, 5])\n",
    "b = np.array([2, 4, 6])\n",
    "c = np.array([1, 5, 7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "id": "185b4250-6595-4847-9b74-b7f2d9f18553",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 5, 2, 4, 6])"
      ]
     },
     "execution_count": 406,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.concatenate((a, b)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "id": "34224d48-d666-4625-ab2e-5a4297f191b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 5, 2, 4, 6, 1, 5, 7])"
      ]
     },
     "execution_count": 408,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.concatenate((a,b,c),axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "id": "c53b8bc5-ae72-4584-8d02-0bee5f215ac0",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([[1, 2], [3, 4]])\n",
    "b = np.array([[5, 6]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "id": "3bf482e8-a3f3-4c4a-8650-502dd36135a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2],\n",
       "       [3, 4],\n",
       "       [5, 6]])"
      ]
     },
     "execution_count": 418,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.concatenate((a, b), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "id": "3f105a6b-de98-420c-93b2-6091f920e228",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1, 2, 3, 4, 5, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "id": "3ee6b9ac-54a1-4dff-a96d-0a12e6663d71",
   "metadata": {},
   "outputs": [],
   "source": [
    "b, c = np.split(a, [3])  #a를 세개로 나누어줘"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "id": "040d1ae7-2229-4512-ba66-5690788ea3d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3]\n",
      "[4 5 6]\n"
     ]
    }
   ],
   "source": [
    "print(b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "id": "33da472a-4c82-4bca-830e-e0dd1c15f0ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([7, 8, 9, 10, 11, 12])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "id": "2c24faa5-7097-4d89-a8dd-ba35abe1b27b",
   "metadata": {},
   "outputs": [],
   "source": [
    "b, c = np.split(a, [3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "ac080827-c347-464c-b599-c665a1f68fc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7 8 9]\n",
      "[10 11 12]\n"
     ]
    }
   ],
   "source": [
    "print(b)\n",
    "print(c)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
